#!/bin/bash
if [ $# -eq 0 ]; then
    git status
    exit 0
fi

_is_master () {
    local branches=( develop master )
    local e
    for e in "${branches[@]}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

_prompt_pull() {
    branch="`git rev-parse --abbrev-ref HEAD 2>&1`"
    if [[ "$branch" =~ Not\ a\ git\ repo ]]; then
        echo "Not a git repository: $PWD"
        return 1
    fi
    _is_master $branch
    if ! [ $? -eq 0 ]; then
        while true; do
            read -p "You are not on develop or master, do you still want to pull?" yn
            case "$yn" in
                [Yy]*) break;;
                [Nn]*) return 1;;
            esac
        done
    fi
    echo "Pulling origin/$branch in $PWD"
    pull="`git pull origin $branch 2>&1`"
}

_git_pull_recurse() {
    for path in $(pwd)/*; do
        [ -d "${path}" ] || continue
        (cd ${path} && _prompt_pull)
    done
}

OP=$1
shift
case "$OP" in
    a) git add $@ ;;
    b) git blame $@ ;;
    c) git commit $@ ;;
    d) git diff $@ ;;
    l) git log $@ ;;
    s) git status ;;
    m)
        if [ $# -eq 0 ]; then
            git merge -
        else
            git merge $@
        fi
        ;;
    ch)
        if [ $# -eq 0 ]; then
            git checkout -
        else
            git checkout $@
        fi
        ;;
    ps)
        if [ $# -eq 0 ]; then
            git push origin $(git rev-parse --abbrev-ref HEAD)
        else
            git push $@
        fi
        ;;
    pl)
        if [ $# -eq 0 ]; then
            git fetch && git pull origin $(git rev-parse --abbrev-ref HEAD)
        elif [ $1 == "--recurse" ]; then
            _git_pull_recurse
        else
            git pull $@
        fi
        ;;
    *)
        git $OP $@
        ;;
esac
