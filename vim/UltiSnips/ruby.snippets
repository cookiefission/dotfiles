global !p
def prefix_words(string, prefix):
    return re.sub(r'\b(\w)', prefix + r'\1', string)

def classify(string):
    return "".join(x.title() for x in string.split('_'))

endglobal

snippet attp "Add private attr_reader" b
attr_reader $1
private $1
$0
endsnippet

snippet init "Add constructor" b
def initialize${1/(.+)/(?1:\(:)/}$1${1/(.+)/(?1:\):)/}
  `!p snip.rv = prefix_words(t[1], '@')` ${1/(.+)/(?1:=:)/} $1$0
end
endsnippet

snippet class "Add class with boilerplate" b
class ${2:`!p snip.rv = classify(snip.basename)`}

  attr_reader `!p snip.rv = prefix_words(t[1], ':')`
  private `!p snip.rv = prefix_words(t[1], ':')`

  def initialize${1/(.+)/(?1:\(:)/}$1${1/(.+)/(?1:\):)/}
    `!p snip.rv = prefix_words(t[1], '@')` ${1/(.+)/(?1:=:)/} $1$0
  end
  $0
end
endsnippet

snippet "^(\s*)([\w_]+)\s*$" "def" r
`!p snip.rv=match.group(1)`def `!p snip.rv = match.group(2)`${2/(.+)/(?1:\(:)/}$2${2/(.+)/(?1:\):)/}
`!p snip.rv=match.group(1)`  $1$0
`!p snip.rv=match.group(1)`end
endsnippet
