#!/bin/bash

source $HOME/.fzf.bash

if command -v hub >/dev/null 2>&1; then
    GIT_COMMAND=hub
else
    GIT_COMMAND=git
fi

_git_status() {
    $GIT_COMMAND status -s
}

_git_log_last() {
    echo "Log:"
    git log --color --pretty=oneline --abbrev-commit HEAD@{1}.. | sed 's/^/  /'
}

_git_pull() {
    git fetch && git pull origin $(git rev-parse --abbrev-ref HEAD)
    _git_log_last
}

_fuzzy_branch() {
    git for-each-ref --format='%(refname:short)' | fzf +m --query="$@" --select-1
}

_fuzzy_commit() {
    git log --pretty=oneline | fzf -m | cut -c 1-40
}

_fuzzy_show() {
    commit=$(_fuzzy_commit) && git show $commit
}

_fuzzy_open_commit() {
    commit=$(_fuzzy_commit) && vim $(git diff-tree --no-commit-id --name-only -r $commit | grep -v lock)
}

_fuzzy_git() {
    PS3="g> "
    local git_options="show clone open_commit"

    select cmd in $git_options; do
        case $cmd in
            "show")
                _fuzzy_show
                exit 0
                ;;
            "clone")
                _short_clone
                exit 0
                ;;
            "open_commit")
                _fuzzy_open_commit
                exit 0
                ;;
            *)
                echo "Bad Option"
        esac
    done
}

_checkout_merge() {
    if [ -z "$@" ]; then
        git checkout -q - && git merge -
    else
        git checkout -q "$@" && git merge -
    fi
}

_is_master() {
    local branches=( develop master )
    local e
    for e in "${branches[@]}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

_prompt_pull() {
    branch="`git rev-parse --abbrev-ref HEAD 2>&1`"
    if [[ "$branch" =~ Not\ a\ git\ repo ]]; then
        echo "Not a git repository: $PWD"
        return 1
    fi
    _is_master $branch
    if ! [ $? -eq 0 ]; then
        while true; do
            read -p "You are not on develop or master of ${PWD}, do you still want to pull? " yn
            case "$yn" in
                [Yy]*) break;;
                [Nn]*) return 1;;
            esac
        done
    fi
    echo "Pulling origin/$branch in $PWD"
    pull="`git pull origin $branch 2>&1`"
}

_git_pull_merge() {
    branch=$1
    git checkout -q $branch
    git pull origin $branch > /dev/null
    git checkout -q -
    git merge -
}

if [ $# -eq 0 ]; then
    _git_status
    exit 0
fi

OP=$1
shift
case "$OP" in
    d)
        if [ $# -eq 0 ]; then
            git diff
        elif [ $1 == "-" ]; then
            git diff @{-1}
        elif [ $1 == "-z" ]; then
            shift
            branch=$(_fuzzy_branch "$@") && git diff $branch
        else
            case $1 in
                h) git diff HEAD ;;
                *) git diff "$@"
            esac
        fi
        ;;
    l)
        if [ $# -eq 0 ]; then
            git log --oneline --decorate --all --graph
        elif [ $1 == "--last" ]; then
            _git_log_last
        else
            git log "$@"
        fi
        ;;
    s)
        if [ $# -eq 0 ]; then
            git stash
        else
            case $1 in
                a) git stash apply ;;
                d) git stash drop ;;
                p) git stash pop ;;
                *) git stash "$@" ;;
            esac
        fi
        ;;
    m)
        if [ $# -eq 0 ]; then
            git merge -
        elif [ $1 == "-p" ]; then
            shift
            _git_pull_merge $1
        elif [ $1 == "-z" ]; then
            shift
            branch=$(_fuzzy_branch "$@") && git merge $branch
        else
            git merge "$@"
        fi
        ;;
    ch)
        if [ $# -eq 0 ]; then
            git checkout -q -
        elif [ $1 == "-m" ]; then
            shift
            _checkout_merge "$@"
        elif [ $1 == "-z" ]; then
            shift
            branch=$(_fuzzy_branch "$@") && git checkout $branch
        else
            git checkout -q "$@"
        fi
        ;;
    psu) git push -u origin $(git rev-parse --abbrev-ref HEAD) ;;
    z) _fuzzy_git "$@" ;;
    *)
        $GIT_COMMAND $OP "$@"
        ;;
esac
